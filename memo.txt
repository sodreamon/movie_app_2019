1:34


### react app 만들기

npx create-react-app movie_app




### 깃 업로드

git init
git remote add origin https://github.com/sodreamon/movie_app.git
git add.
git commit -m "start"
git push origin master




### gh pages
npm i gh-pages

json <script>에 "deploy": "gh-pages " 추가
                "predeploy": "npm run build"
json 에 "homepage": "https://sodreamon.github.io/movie_app_2019" 추가

[console] npm run build
npm run deploy




### Router
/home에 있으면 Home.js를 가져오고 /about에 있으면 About.js를 가져오도록 하는 것
[react router dom]
npm i react-router-dom
src components 폴더 추가
    routes 폴더 추가
import { HashRouter, Route } from "react-router-dom";
HashRouter와 BrowserRouter 둘 중 하나 선택해서 사용해도됨

[App.js]
function App() {
  return (
    <HashRouter>
      <Route path="/" exact={true} component={Home} />
      <Route path="/about" exact={true} component={About} />
    </HashRouter>
  );
}
import한 HashRouter와 Route를 여기서 씀
path="/"은 /about path에서 Home과 About의 내용이 합쳐져 나온다. 그래서 exact={true}를 써서 방지한다.1





### Link
src. components. Navigation
import { Link } from "react-router-dom";
<a href 대신 <Link to=""> </Link>를 씀. 새로고침 대신 사용된다.
Link는 Router 안에서만 사용가능 <HashRouter>안에서만 사용가능 [App/js 참조]
Link를 사용하지 않는다면 굳이 Router 안에 넣을 필요는 없음

Movie.js에서 Link를 사용해 경로를 지정하고 해당경로 props에 넣을 내용(state)를 지정





### 
routes. Detail
Movies.js Link에서 만들어진 props.location을 가져와 사용 {location}은 props.location과 같음
{history}는 console에서 props를 보면 페이지 관련 명령어들이 있다.
App.js 와 Movies.js 에 Detail로 가는 url을 만듬 App.js -> /movie/:id      Movies.js -> `/movie/${id}`





### 새로운 js 생성
src. Potato




### prop 검사
https://github.com/facebook/prop-types
npm i prop-types
src. App
import PropTypes
Food.propTypes = {
console에서 에러 확인




### class component 만들기
src. App
class App extends React.Component{}
App이 클래스 이름이 됨
state = {}
state의 데이터는 변화함




### axios
src. App
npm i axios
import axios from "axios";
axios.get("{json}")




### async await
src. App




### JSX html 언어
class > className
for > htmlFor ([js] for은 loop임)





### Movies.js
Movie Component Movies.js에서 만들고
App.js에서 사용
Movie Component에서 html에 나타낼 내용 모두 입력
getMovies가 App에 있기 때문에
Movies. Movie에 사용된 title, year, summary등은 App.js에 import 되고 나서 해당 내용의 경로가 지정됨.
App. App. render에서 map으로 만들어진 array 들의 정보를 만들고(id는 여기서 생성)
Movies. Movie에서 html에 보여질 내용 입력

<h3 class="movie__title" style={{backgroundColor: "red"}}>{title}</h3>
직접 css를 넣을 때

css
import "./Movie.css"; 

genres
genres prop는 array이기 때문에 map으로 genre array들을 만들어줌
결국 ul movie__genres 안에 li genres__genre가 생김
<ul className="movie__genres">
          {genres.map((genre, index) => (
              함수 genre와 index를 생성 index는 id를 위해 숫자를 매김

            <li className="genres__genre" key={index}>
            index를 숫자로 씀
            
              {genre}
            </li>
          ))}
        </ul>




      