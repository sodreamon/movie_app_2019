{"version":3,"sources":["Movies.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kUAiCeA,MA7Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,gBAAgBC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IAC/D,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,iBACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIL,UAAU,gBAAgBM,IAAKD,GAChCD,OAIP,wBAAIJ,UAAU,eAAeL,GAC7B,uBAAGK,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,UCkDOC,G,iNA5DbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAMAC,IAAMC,IACd,4DAPQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAMZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IATzB,2C,mFAiBVQ,KAAKN,c,+BASG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAEnB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAAAgB,GAAK,OACf,kBAAC,EAAD,CACEb,IAAKa,EAAMC,GACXA,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,kB,GAlDZuB,IAAMC,YCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.686464dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img className=\"moive__poster\" src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            <li className=\"genres__genre\" key={index}>\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movies\";\nimport \"./App.css\";\n// import PropTypes from \"prop-types\";\n// import Potato from \"./Potato\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n        //data.data.movies와 같은 [es6] 표현 여튼 마지막 movies를 movies라고 정의함\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    this.setState({ movies, isLoading: false });\n    //this.setState({movies:movies}) ({스테이트에 있는 movies : getMovies에서 정의한 movies}) 와 같이 표현가능\n\n    //console.log(movies);\n    //async로 동기화 되는 것이라고 알려줌, await로 시간이 걸리는 걸 알려줌    await는 async가 있어야 사용가능\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  /*componentDidMount() {\n    setTimeout(() => {\n      this.setState({ isLoading: false });\n    }, 6000);\n    //render되면 실행되는 함수임.   setTimeout으로 6초 뒤에 setTimeout 내부 값을 실행    setState로 isLoading을 false값으로 변경\n  }*/\n  render() {\n    const { isLoading, movies } = this.state;\n    //[ES6] isLoading이 state에 있는 isLoading이라고 정의     movies는 Movies.Moive component와 무관함\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n              //Movies.Movie component를 가져옴 Movie({}) component에 지정한 항목들만 내용물로 사용가능     <Movie 안의 내용들만 Movies.js > Movie component와 관련있음\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n/*class App extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   console.log(\"hello\");\n  //}\n  state = {\n    count: 0\n  };\n  add = () => {\n    this.setState(current => ({\n      count: current.count + 1\n    }));\n  };\n  minus = () => {\n    this.setState(current => ({\n      count: current.count - 1\n    }));\n    // state를 직접 변경하면 안됨 setState를 써야 됨. (current => ({count: current.count + 1}))는 ({count: this.state.count + 1})과 같음    setState를 호출 할 때마다 새로운 state를 render해옴\n  };\n\n  // componentDidMount() {\n  //   console.log(\"component rendered\");\n  //   //render가 처음 발생하면 실행 update때는 상관 없음\n  // }\n  // componentDidUpdate() {\n  //   console.log(\"i just updated\");\n  //   //render가 state등에 의해 update되면 실행\n  // }\n  // componentWillUnmount() {\n  //   console.log(\"Goodbye, cruel world\");\n  //   //다른 페이지로 가거나 등등 component가 끝날 때 실행\n  // }\n  render() {\n    // console.log(\"im rendering\");\n    return (\n      <div>\n        <h1>the number is {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  }\n  // state 내부의 값은 변화를 줄 수 있음\n  // 클릭하면 add, minus 함수를 실행하는 버튼을 만듬\n}*/\n\n// 일단은 array를 하나 만듬\n/* const FoodILike = [\n  {\n    id: 1,\n    // map을 써서 각각의 {}가 정의되면 모두 같은 정의를 갇기 때문에 id가 필요함\n    name: \"Kimchi\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.ytimg.com%2Fvi%2FeTucCw1w6Ak%2Fmaxresdefault.jpg&f=1&nofb=1\",\n    rating: 5\n  },\n  {\n    id: 2,\n    name: \"Samgiopsal\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ft1.daumcdn.net%2Fliveboard%2Fdailylife%2F222d88e5c7dc496c8e8a8a56c3452e52.JPG&f=1&nofb=1\",\n    rating: 4.9\n  },\n  {\n    id: 3,\n    name: \"Bibimbab\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F4%2F44%2FDolsot-bibimbap.jpg%2F1200px-Dolsot-bibimbap.jpg&f=1&nofb=1\",\n    rating: 4.8\n  },\n  {\n    id: 4,\n    name: \"Doncasu\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fimg1.daumcdn.net%2Fthumb%2FR800x0%2F%3Fscode%3Dmtistory2%26fname%3Dhttps%253A%252F%252Ft1.daumcdn.net%252Fcfile%252Ftistory%252F9907F84D5C558B9429&f=1&nofb=1\",\n    rating: 5.5\n  },\n  {\n    id: 5,\n    name: \"Kimbab\",\n    image:\n      \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F16610E42512D8B7C15&f=1&nofb=1\",\n    rating: 4.7\n  }\n]; */\n\n/*function Food({ name, picture, rating }) {\n  // Food를 JSX component로 쓸 거라서 첫글자 대문자\n   console.log(fav);\n  콘솔 창에 JSX fav값을 출력한다. \n  function Food({ fav })는 (props.fav)와 같음\n  한 conponent에서 여러 props를 사용하려면\n  function Food(props) -> props.fav 처럼 사용하는게 편함 \n  return (\n    <div>\n      <h1>I like {name}</h1>\n      <h4>{rating}/5.0</h4>\n      <img src={picture} alt={name} />\n       image는 src(source라는 뜻)를 써야됨 \n    </div>\n  );\n   Food가 가진 모든 fav를 loop로 출력함 \n} */\n\n/*Food.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired\n   내용물이 string인지 number인지 \n  require은 필수 인지 아닌지\n};*/\n\n/* function renderFood(dish) {return <Food name={dish.name} picture={dish.image} />;}\n아래 {FoodILike.map(renderFood)}를 dish라고 재정의 하고 이전 방식과 같이 return 할 수 있다. */\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      {FoodILike.map(dish => (\n        <Food\n          key={dish.id}\n          name={dish.name}\n          picture={dish.image}\n          rating={dish.rating}\n        />\n      ))}\n      map으로 FoodILike array 안의 dish를 정의하고 dish들 안에 정의된 name들을\n      호출함. 그리고 Food 함수로 props를 보냄.\n      그리고 dish들은 같은 정의를 갇기 때문에 만든 id값을 넣어줌 key\n\n      {FoodILike.map(renderFood)}\n      위쪽에 renderFood라는 function을 만들어 내부값을 만들어줄 수 있다\n\n      <Food fav=\"kimchi\" />\n      component는 첫글자 대문자 필수 Food \n       위 같이 props를 만들어줌 fav가 props임\n      <Food fav=\"ramen\" />\n      <Food fav=\"samgiopsal\" />\n      <Food fav=\"chukumi\" /> \n\n       <Potato /> \n      Potato 내용이 hello 내용 아래에 입력됨(index.js에 따로 Potato를 쓸 필요\n      없음)\n    </div>\n  );\n}*/\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}